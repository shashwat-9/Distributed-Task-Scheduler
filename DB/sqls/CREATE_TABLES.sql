CREATE TABLE tasks.SCHEDULED_TASKS (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    CRON_SCHEDULE TEXT NOT NULL,
    NEXT_SCHEDULED_DATE DATE NOT NULL,
    TASK JSONB NOT NULL,
    CREATED_AT DATE DEFAULT CURRENT_DATE,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CONSTRAINT check_cron_exp_validity CHECK ( CRON_SCHEDULE ~ '^((?:\*|\d+(?:-\d+)?(?:,\d+(?:-\d+)?)*)(?:/\d+)?)\s+((?:\*|\d+(?:-\d+)?(?:,\d+(?:-\d+)?)*)(?:/\d+)?)\s+((?:\*|\d+(?:-\d+)?(?:,\d+(?:-\d+)?)*)(?:/\d+)?)\s+((?:\*|\d+(?:-\d+)?(?:,\d+(?:-\d+)?)*)(?:/\d+)?)\s+((?:\*|\d+(?:-\d+)?(?:,\d+(?:-\d+)?)*)(?:/\d+)?)$'')' )
);

CREATE TABLE tasks.TRIGGERED_TASK (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    TASK JSONB NOT NULL
);

CREATE TABLE tasks.SCHEDULED_TASKS_EXECUTION (
    ID SERIAL,
    TASK JSONB NOT NULL,
    SCHEDULED_TIME TIME NOT NULL,
    EXECUTION_DATE DATE NOT NULL,
    STATUS CHARACTER DEFAULT 'A' CHECK (STATUS IN ('A', 'S', 'F', 'P')),    --AWAITED, SUCCESS, FAILURE, PROGRESS
    SCHEDULED_TASK_ID INTEGER REFERENCES SCHEDULED_TASKS(ID) ON DELETE CASCADE,
    LOG_LOCATION TEXT,
    PRIMARY KEY (EXECUTION_DATE, ID)
) PARTITION BY RANGE (EXECUTION_DATE);

CREATE TABLE tasks.TRIGGERED_TASKS_EXECUTION (
    ID SERIAL,
    STATUS CHARACTER DEFAULT 'A' CHECK (STATUS IN ('A', 'S', 'F', 'P')),    --AWAITED, SUCCESS, FAILURE, PROGRESS
    TRIGGERED_AT TIME,
    EXECUTION_DATE DATE NOT NULL,
    TRIGGERED_TASK_ID INTEGER REFERENCES TRIGGERED_TASK(ID) ON DELETE CASCADE,
    LOG_LOCATION TEXT,
    PRIMARY KEY (EXECUTION_DATE, ID)
) PARTITION BY RANGE (EXECUTION_DATE);